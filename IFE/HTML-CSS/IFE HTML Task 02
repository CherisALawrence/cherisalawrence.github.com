<!DOCTYPE html>
<html>
	<head>
		<meta charset="UTF-8">
		<title>IFE HTML Task 02</title>
		<style>
			body
			{
				background:rgba(128, 128, 128, 0.5);
			}
			nav
			{
				display:block;
				position:fixed;
				width: 100%;/*这样可以做到整个页面上面全覆盖*/
				height: 50px;
				left: 0px;
				right: 0px;
    			top:0px;
    			bottom: 0px;
    			/*这个是有浏览器默认的；不过规定为0之后就是想要的效果了*/
    			
				border-bottom: 1px outset rgba(128, 128, 128, 0.5);
    			background: rgba(0, 0, 0, 0.8);
    			box-shadow: 0px 1px rgba(0, 0, 0, 0.3);
			}
			nav ul
			{
				float:right;/*ul整体靠右*/
				margin:0px;/*如果需要ul不带默认浏览器设置的高度就在这里改默认外边距*/
				line-height: 50px;/*上一行：顶上的边距没了，但是文字在九宫格的8位；这一行：垂直居中√*/
				/*这个方法只限于只有一行的文字或者按钮；多行以后再说*/
			}
				/*list-style-type:none;*/	/*list-style-type:none - 删除圆点。导航栏不需要列表项标记。*/
				/*关于删除圆点：li设置成display:inline;自动就不显示了*/
			.topnav ul li
			{
				text-align:center;
				display:inline-block;/*默认地，<li> 元素是块元素。在这里，我们去除了每个列表项前后的换行，以便让它们在一行中显示。*/
				float:left;/*float:left - 使用 float 来把块元素滑向彼此。*/
				/*注意这里的left right：如果写right就会既靠右贴边但是是倒序321；单纯想贴右这里填left 在其他地方写贴边*/
			}
			.topnav a
			{
				text-decoration:none;/*这样字体下划线就没了*/
				height: 50px;
				/*让块状和导航栏一样高，高度要加在这里，50px跟导航栏保持一致*/
				display:block;/*display:block - 把链接显示为块元素可使整个链接区域可点击（不仅仅是文本），同时也允许我们规定宽度。*/
				width:100px;/*请始终规定垂直导航栏中 <a> 元素的宽度。如果省略宽度，IE6 会产生意想不到的结果。*/
				color: gray;
			}
			.topnav a:hover,
			.topnav a:focus
			{
				background: rgba(255, 255, 255, 0.5);
				color: #000;
			}
			
			
			
			div
			{
				margin:20px;/*外边距*/
				padding:20px;/*内边距*/
				border:1px  solid  white;/*dashed（虚线）| dotted（点线）| solid（实线）*/
				background: rgba(255, 255, 255, 1);
    			box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.3);/*右 下 左 上 左上你不要可以不填 左上同样效果比右下不明显*/
			}
			.first-article
			{
				margin-top:70px;
				/*50是导航栏的 20是div本身*/
			}
			div h1
			{
				font-family: "微软雅黑";
				font-size:20px;
				color:#000;
			}
			div h3
			{
				font-family: "微软雅黑";
				font-size:16px;
				color:dimgray;
			}
			div h5
			{
				font-family: "微软雅黑";
				font-size:12px;
				color:dimgray;
			}
			
			.picture
			{
				font-size:8px ;
				padding:0px;
				width: 200px;
				text-align:center;
				border:1px  solid  gray;
				box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.1);
			}
			.second-photo img
			{
				width:180px;
				margin-bottom: 10px;
			}
			
			.last-article ol li
			{
				font-weight:bold;
			}
			
			table
			{
				width: 100%;
				border:1px  solid  white;
				box-shadow: 1px 1px 1px 1px rgba(0, 0, 0, 0.5);
			}
			table th
			{
				background: rgba(0, 0, 0, 0.8);
				color: white;
				
			}
			table .last-tr
			{
				background: rgba(111, 111, 111, 0.5);
			}
			
			form
			{
				/*vertical-align: middle; 这句没有用啊*/
				text-align:center;
			}
			.1
			{
				left: 20em;
				/*em不用担心字体大小；是半个汉字的长度*/
			}
		</style>
	</head>
	
<!--
导入CSS的方法：
优先级：内联式(直接写标签上)> 嵌入式(HTML内部定义) > 外部式(外部导入)
FBI WARNING：嵌入式>外部式有一个前提：嵌入式css样式的位置一定在外部式的后面。
<head>
	<link href="style.css" ...>
	<style type="text/css">
		...
	</style>
</head>
把它们调换顺序，再看他们的优先级会变化。

1.行内式
		行内式是在标记的style属性中设定CSS样式。这种方式没有体现出CSS的优势，不推荐使用。
		<p style="color:red;font-size:12px">
2.嵌入式
          嵌入式是将CSS样式集中写在网页的<head></head>标签对的<style></style>标签对中。格式如下：
        <head>
         	<style type="text/css">
         		...此处写CSS样式
         	</style>
        </head>
		缺点是对于一个包含很多网页的网站，在每个网页中使用嵌入式，进行修改样式时非常麻烦。单一网页可以考虑使用嵌入式。
3.导入式
		 将一个独立的.css文件引入HTML文件中，导入式使用CSS规则引入外部CSS文件，<style>标记也是写在<head>标记中，使用的语法如下：
		<style type="text/css">
			@import"mystyle.css"; 此处要注意.css文件的路径
		</style>
		导入式会在整个网页装载完后再装载CSS文件，因此这就导致了一个问题，如果网页比较大则会儿出现先显示无样式的页面，闪烁一下之后，再出现网页的样式。这是导入式固有的一个缺陷。
4.链接式
		也是将一个.css文件引入到HTML文件中，但它与导入式不同的是链接式使用HTML规则引入外部CSS文件，它在网页的<head></head>标签对中使用<link>标记来引入外部样式表文件，使用语法如下：
		<link href="mystyle.css" rel="stylesheet" type="text/css"/>
		rel="stylesheet" type="text/css" 是固定写法不可修改。
		使用链接式时与导入式不同的是它会以网页文件主体装载前装载CSS文件，因此显示出来的网页从一开始就是带样式的效果的，它不会象导入式那样先显示无样式的网页，然后再显示有样式的网页，这是链接式的优点。

总结：一般来说，做网站时把样式多写在多个样式表文件中，因此我们先用链接式引入一个总的CSS文件，然后在这个CSS文件中在使用导入式来引入其他的CSS文件。但如果通过JavaScrip来动态引入CSS文件则只能使用链接式。
-->
	
	
<!--
选择器：
	标签选择器	其实就是html代码中的标签		p{font-size:12px;line-height:1.6em;}
	类选择器		.class名称{css样式代码;}		class="class名称"
	ID选择器		#ID名称{css样式代码;}		id="ID名称"
	子选择器		即大于符号(>),用于选择指定标签元素的	第一代	子元素。		.first>li{css样式代码;}	如果li里面还有li第二个就不适用
	包含选择器	即加入空格,用于选择指定标签元素下的后辈元素		.first  span{css样式代码;}	适用于所有子后代元素
	伪类选择符	a:hover{color:red;}不解释
	分组选择符	h1,span{color:red;}
				等价于两行代码	h1{color:red;}
								span{color:red;}
								
继承：
标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100
p{color:red;} /*权值为1*/
p span{color:green;} /*权值为1+1=2*/
.warning{color:white;} /*权值为10*/
p span.warning{color:purple;} /*权值为1+1+10=12*/
#footer .note p{color:yellow;} /*权值为100+10+1=111*/

层叠：
当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。
p{color:red;}
p{color:green;}
<p class="first">三年级时，我还是一个<span>胆小如鼠</span>的小女孩。</p>
最后 p 中的文本会设置为green，这个层叠很好理解，理解为后面的样式会覆盖前面的样式。
-->

<!--
元素分类

块级元素：
	在html中<div>、 <p>、<h1>、<form>、<ul> 和 <li>就是块级元素。
	块级元素特点：
		1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）
		2、元素的高度、宽度、行高以及顶和底边距都可设置。
		3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。

	设置display:block就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。
	a{display:block;}

内联元素：
	在html中，<span>、<a>、<label>、 <strong> 和<em>就是典型的内联元素（行内元素）（inline）元素。
	内联元素特点：
		1、和其他元素都在一行上；
		2、元素的高度、宽度及顶部和底部边距不可设置；
		3、元素的宽度就是它包含的文字或图片的宽度，不可改变。
	当然块状元素也可以通过代码display:inline将元素设置为内联元素。
	
内联块状元素
	内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。(css2.1新增)，<img>、<input>标签就是这种内联块状标签。
	inline-block 元素特点：
		1、和其他元素都在一行上；
		2、元素的高度、宽度、行高以及顶和底边距都可设置。
-->

<!--
	
流动模型
	流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型来分布网页内容的。
	流动布局模型具有2个比较典型的特征：
		第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。如右侧代码编辑器中三个块状元素标签(div，h1，p)宽度显示为100%。
		第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）
		
浮动模型
	块状元素这么霸道都是独占一行，如果现在我们想让两个块状元素并排显示，怎么办呢？不要着急，设置元素浮动就可以实现这一愿望。
	任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动，如 div、p、table、img 等元素都可以被定义为浮动。
	div{
    	width:200px;
    	height:200px;
    	border:2px red solid;
    	float:left;
	}
	<div id="div1"></div>
	<div id="div2"></div>
	可以实现两个 div 元素一行显示。（ps:不是Z轴叠在一起 是想要的效果 一个跟一个）也可以设置一左一右 或者全靠右
	
	
层模型有三种形式：
1、绝对定位(position: absolute)
2、相对定位(position: relative)
3、固定定位(position: fixed)

层模型--绝对定位
	如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。
	
层模型--相对定位
	如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。
	什么叫做“偏移前的位置保留不动”呢？
	<body>
    	<div id="div1"></div><span>偏移前的位置还保留不动，覆盖不了前面的div没有偏移前的位置</span>
	</body>
	可以明显的看出，虽然div元素相对于以前的位置产生了偏移，但是div元素以前的位置还是保留着，所以后面的span元素是显示在了div元素以前位置的后面。(原来位置还在，只是相当于折射偏移了位置，后面的元素紧跟着原来div的位置不覆盖)
	
层模型--固定定位
	fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与background-attachment:fixed;属性功能相同。拖动滚动条时位置固定不变。
	(似里！小广告)
-->
	<body>
		<nav class="topnav">
		<!--nav是HTML5中新标签 定义导航链接的部分-->
				<ul class="navbar-right">
					<li><a href="#">导航链接1</a></li>
					<li><a href="#">导航链接2</a></li>
					<li><a href="#">导航链接3</a></li>
					<!--不是herf-->
				</ul>
		</nav>
		
		<div class="container first-article">
			<h1>文章一级标题</h1>
			<h3>文章二级标题</h3>
			<h5>文章作者 发表时间</h5>
			<p>这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落</p>
			<p>
				这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落，换行了<br />这是一个很长的段落这是一个很长的段落这是一个很长的段落
				<!--并没有换行 不用br的话 这里只是看的方便-->
				<a href="http://ife.baidu.com/">这里有一个链接连到http://ife.baidu.com</a>
				这是一个很长的段落这是一个很长的段落这是一个很长的段落，<strong>这里有粗体字</strong>这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落
				<br />
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
				<br />
				这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落这是一个很长的段落
				<a href="http://ife.baidu.com/"target="_blank">这里有一个链接打开后跳出新窗口连到http://ife.baidu.com</a>
			</p>
			<ul>
				<!--注意这里要隐掉ul的点-->
				<li>列表项目1</li>
				<li>列表项目2</li>
				<li>列表项目3</li>
			</ul>
		</div>
		<div class="container second-photo">
			<h1>图片</h1>
			<div class="picture">
				<p>好看的图片</p>
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
			</div>
			<div class="picture">
				<p>好看的图片</p>
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
			</div>
			<div class="picture">
				<p>好看的图片</p>
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
			</div>
			<div class="picture">
				<p>好看的图片</p>
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
			</div>
			<div class="picture">
				<p>好看的图片</p>
				<img src="https://i0.hdslb.com/bfs/archive/ca0f7bcce93372c888150c5f201091d4b0152d09.jpg@.webp" />
			</div>
			
		</div>
		<div class="container last-article">
			<h1>最后一篇文章一级标题</h1>
			<h3>文章二级标题</h3>
			<h5>文章作者 发表时间</h5>
			<ol>
				<li>排名1</li>
				<li>排名2</li>
				<li>排名3</li>
			</ol>
			<p>下面是一个表格 给表格加了border="1"你们不用加</p>
<!--table表标签
table、tbody、tr、th、td
1、<table>…</table>：整个表格以<table>标记开始、</table>标记结束。
2、<tbody>…</tbody>：当表格内容非常多时，表格会下载一点显示一点，但如果加上<tbody>标签后，这个表格就要等表格内容全部下载完才会显示。如右侧代码编辑器中的代码。
3、<tr>…</tr>：表格的一行，所以有几对tr 表格就有几行。
4、<td>…</td>：表格的一个单元格，一行中包含几对<td>...</td>，说明一行中就有几列。
5、<th>…</th>：表格的头部的一个单元格，表格表头。
6、表格中列的个数，取决于一行中数据单元格的个数。
-->
			<table>
				<tbody>
					<tr>
						<th>表头</th>
						<th>表头</th>
						<th>表头</th>
					</tr>
					<tr>
						<td>表内容单元格</td>
						<td>表内容单元格</td>
						<td><a href="#">操作</a></td>
					</tr>
					<tr>
						<td>表内容单元格</td>
						<td>表内容单元格</td>
						<td><a href="#">操作</a></td>
					</tr>
					<tr class="last-tr">
						<td>总计</td>
						<td colspan="2">1000</td>
						<!--colspan="2"：合并单元格的效果-->
					</tr>
				</tbody>
			</table>
		</div>
		
		<!--sidebar-->
		<div class="sidebar">
			<h1>以后是一个侧栏 这是侧栏的标题</h1>
			<h3>侧栏注册窗口标题</h3>
			<!--form表单是可以把浏览者输入的数据传送到服务器端，这样服务器端程序就可以处理表单传过来的数据
				语法<form   method="传送方式"   action="服务器文件">
				1、所有表单控件（文本框、文本域、按钮、单选框、复选框等）都必须放在 <form></form> 标签之间（否则用户输入的信息可提交不到服务器上哦！）。
				2、method : post/get 的区别这一部分内容属于后端程序员考虑的问题。感兴趣的小伙伴可以查看本小节的 wiki，里面有详细介绍。
			-->
			<form>
				<!--label标签不会向用户呈现任何特殊效果，它的作用是为鼠标用户改进了可用性。如果你在 label 标签内点击文本，就会触发此控件。就是说，当用户单击选中该label标签时，浏览器就会自动将焦点转到和标签相关的表单控件上（就自动选中和该label标签相关连的表单控件上）。-->
				<label for="username" class="1">用户名:</label>
				<input type="text" id="username" value="" /><br />
				<label for="pass">密码:</label>
				<input type="password" id="pass" value="" /><br />
				<label for="pass2">请重复输入密码:</label>
				<input type="password" id="pass2" value="" /><br />
				<label>性别:</label>
				<input type="radio" name="单选框1" checked="checked" value="男"/>男
				<input type="radio" name="单选框1" value="女"/>女
				<br />
				<!--radio是单选 checkbox是多选 checked="checked"表示默认被选中-->
				<label>爱好:</label>
				<input type="checkbox" name="复选框1" checked="checked" />运动
				<input type="checkbox" name="复选框1"/>游戏
				<input type="checkbox" name="复选框1"/>乐器
				<br />
				<label>城市:</label>
				<select  >
      				<option value="1">北京</option>
      				<option value="2">上海</option>
      				<option value="3">xx</option>
      				<option value="4">yy</option>
    			</select>
    			<br />
				<label>描述:</label>
				<!--	<textarea  rows="行数" cols="列数">文本</textarea>		-->
				<textarea value="这是一个多选输入框">文本</textarea>
				<br />
				<input   type="submit"   value="提交">
			</form>  
		</div>
		
		<footer>
			<p>company 2017</p>
		</footer>
	</body>
</html>
<!--
	css
    font-size:12px;字体
    color:#930;字体颜色
    text-align:center;字体居中对齐

想加入一行代码吗？使用<code>标签
<code>{background-image:linear-gradient(left, red 100px, yellow 200px);}</code>
-->
